generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  firstName     String?
  lastName      String?
  password      String?
  role          String         @default("user")
  phone         String?
  avatar        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String?
  emailVerified Boolean?
  image         String?
  reservations  Reservations[]
  accounts      Account[]
  sessions      Session[]

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@map("user")
}
model Trips {
  id           String  @id @default(cuid())
  title        String?
  subtitle     String?
  pricePrivate String?
  priceShuttle String?
  image        String?
  overview     String?
  includes     String?
  excludes     String?
  duration     String?

  itinerary String[]
  options   Options[]

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Reservation Reservations[]
}

model Options {
  id          String   @id @default(cuid())
  title       String?
  price       String?
  time        String?
  canPickup   Boolean?
  isPrivate   Boolean?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Trips   Trips?  @relation(fields: [tripsId], references: [id])
  tripsId String?

  Activities   Activities? @relation(fields: [activitiesId], references: [id])
  activitiesId String?

  Reservations Reservations[]
}

model Activities {
  id           String  @id @default(cuid())
  title        String?
  subtitle     String?
  pricePrivate String?
  priceShuttle String?
  image        String?
  overview     String?
  includes     String?
  excludes     String?
  duration     String?

  itinerary String[]
  options   Options[]

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Reservation Reservations[]
}

model Reservations {
  id          String    @id @default(cuid())
  tripId      String?
  activityId  String?
  dateTo      DateTime?
  phoneNumber String?
  email       String?
  name        String?
  kids        Int?
  adults      Int?
  isPaid      Boolean   @default(false)
  isPickup    Boolean   @default(false)
  pickUpPlace String?

  userId    String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  Activities   Activities? @relation(fields: [activitiesId], references: [id])
  activitiesId String?

  Trips   Trips?  @relation(fields: [tripsId], references: [id])
  tripsId String?

  Options   Options? @relation(fields: [optionsId], references: [id])
  optionsId String?
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
