
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  firstName     String?
  lastName      String?
  password      String?
  role          String        @default("user")
  phone         String?
  avatar        String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  name          String?
  emailVerified Boolean?
  image         String?
  reservations  Reservation[]
  accounts      Account[]
  sessions      Session[]

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@map("user")
}

model Trips {
  id           String   @id @default(cuid())
  title        String?
  subtitle     String?
  pricePrivate String?
  priceShuttle String?
  image        String?
  Video        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Activities {
  id           String   @id @default(cuid())
  title        String?
  subtitle     String?
  pricePrivate String?
  priceShuttle String?
  image        String?
  Video        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Reservation {
  id         String    @id @default(cuid())
  tripId     String?
  activityId String?
  dateFrom   DateTime?
  dateTo     DateTime?
  userId     String
  status     String    @default("pending")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
